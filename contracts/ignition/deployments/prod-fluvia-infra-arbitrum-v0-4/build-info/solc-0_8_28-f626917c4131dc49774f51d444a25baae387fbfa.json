{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-f626917c4131dc49774f51d444a25baae387fbfa",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/FeeController.sol": "project/contracts/FeeController.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/FeeController.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./interfaces/IFeeController.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract FeeController is Ownable, IFeeController {\n    uint16 public fastMaxFeeBps; // Circle Fast Fee BPS\n\n    struct Config {\n        address collector; // fee recipient\n        uint16 feeBps; // 1 = 0.01%, 100 = 1%, max 500 (5%)\n        uint256 minNet; // min net (post-fee) required to proceed\n        bool set; // marker for fluvia override existence\n    }\n\n    Config public globalCfg;\n    mapping(address fluvia => Config) public fluviaCfg;\n\n    constructor(\n        address admin,\n        address collector,\n        uint16 feeBps,\n        uint256 minNet,\n        uint16 _fastMaxFeeBps\n    ) Ownable(admin) {\n        require(collector != address(0), \"collector is 0x0\");\n        require(feeBps <= 500, \"bps>5%\");\n        globalCfg = Config({\n            collector: collector,\n            feeBps: feeBps,\n            minNet: minNet,\n            set: true\n        });\n        require(_fastMaxFeeBps <= 500, \"maxfee bps>5%\");\n        fastMaxFeeBps = _fastMaxFeeBps;\n    }\n\n    function setGlobal(\n        address collector,\n        uint16 feeBps,\n        uint256 minNet\n    ) public onlyOwner {\n        require(collector != address(0), \"collector is 0x0\");\n        require(feeBps <= 500, \"bps>5%\");\n        globalCfg = Config({\n            collector: collector,\n            feeBps: feeBps,\n            minNet: minNet,\n            set: true\n        });\n    }\n\n    /// @dev used to set circles max bps\n    function setMaxFeeBps(uint16 bps) public onlyOwner {\n        require(bps <= 500, \"bps>5%\");\n        fastMaxFeeBps = bps;\n    }\n\n    /// @notice Optional per-fluvia override (bps-only).\n    function setFluviaOverride(\n        address fluvia,\n        address collector,\n        uint16 feeBps,\n        uint256 minNet\n    ) external onlyOwner {\n        require(fluvia != address(0) && collector != address(0), \"zero\");\n        require(feeBps <= 500, \"bps > 5%\");\n        fluviaCfg[fluvia] = Config({\n            collector: collector,\n            feeBps: feeBps,\n            minNet: minNet,\n            set: true\n        });\n    }\n\n    function clearfluviaOverride(address fluvia) external onlyOwner {\n        delete fluviaCfg[fluvia];\n    }\n\n    function quoteFee(\n        address fluvia,\n        uint256 amount\n    )\n        external\n        view\n        returns (address collector, uint256 fee, uint256 minNet, uint256 maxFee)\n    {\n        Config memory cfg = fluviaCfg[fluvia].set\n            ? fluviaCfg[fluvia]\n            : globalCfg;\n        collector = cfg.collector;\n        fee = (amount * cfg.feeBps) / 10_000;\n        minNet = cfg.minNet;\n        maxFee = (amount * fastMaxFeeBps) / 10_000;\n    }\n}\n"
      },
      "project/contracts/interfaces/IFeeController.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IFeeController {\n\t/// @return collector  address to receive fees\n\t/// @return fee        fee to take (in USDC base units), computed as (gross * bps / 10_000)\n\t/// @return minNet     minimum net amount required (USDC units)\n\t/// @return maxFee     max fee for circle fast payment\n\tfunction quoteFee(\n\t\taddress fluvia, // fluvia owner()\n\t\tuint256 amount // gross Amount\n\t) external view returns (address collector, uint256 fee, uint256 minNet, uint256 maxFee);\n}\n"
      }
    }
  }
}